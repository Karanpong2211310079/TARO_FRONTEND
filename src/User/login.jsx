import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import Swal from 'sweetalert2';

const API_BASE_URL = import.meta.env.VITE_API_URL;

const Login = () => {
  const navigate = useNavigate();
  const [name, setName] = useState('');
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);

  const preloadImage = () => {
    try {
      const link = document.createElement('link');
      link.rel = 'preload';
      link.href = 'https://i.postimg.cc/sX987Gwd/IMG-0870.webp';
      link.as = 'image';
      document.head.appendChild(link);
    } catch (error) {
      console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤:', error.message);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    console.log('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢:', { name, password, API_BASE_URL });

    if (!API_BASE_URL) {
      setIsLoading(false);
      Swal.fire({
        title: '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô',
        icon: 'error',
        confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á',
      });
      console.error('API_BASE_URL ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤');
      return;
    }

    if (password.length < 6) {
      setIsLoading(false);
      Swal.fire({
        title: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        text: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ô‡∏∞‡∏à‡πä‡∏∞',
        icon: 'warning',
        confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á',
      });
      return;
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    const attemptLogin = async (retries = 2) => {
      try {
        console.log(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${3 - retries})...`);
        const res = await axios.post(
          `${API_BASE_URL}login`,
          { name, phone: password },
          { timeout: 10000 }
        );
        console.log('‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å API:', res.data);

        if (res.status === 200 || res.status === 201) {
          if (!res.data?.user?.role) {
            console.error('‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:', res.data);
            Swal.fire({
              title: '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
              text: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå',
              icon: 'error',
              confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á',
            });
            return false;
          }

          localStorage.setItem('user', JSON.stringify(res.data));
          if (res.data.user.role === 'admin') {
            console.log('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ /admin');
            navigate('/admin', { replace: true });
          } else {
            console.log('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ /home');
            navigate('/home', { replace: true });
          }
          preloadImage(); // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
          return true;
        } else {
          console.error('‡∏£‡∏´‡∏±‡∏™‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î:', res.status);
          Swal.fire({
            title: '‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô',
            icon: 'error',
            confirmButtonText: '‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
          });
          return false;
        }
      } catch (error) {
        console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô:', error.response?.data || error.message);
        if (retries > 0) {
          console.log(`‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${retries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)`);
          return attemptLogin(retries - 1); // ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        }
        let errorMessage = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà';
        if (error.code === 'ECONNABORTED') {
          errorMessage = '‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà';
        } else if (error.response?.data?.message === 'Username already exists with a different password') {
          errorMessage = '‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏•‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ô‡∏∞';
        } else if (error.response?.data?.message === 'Username already in use') {
          errorMessage = '‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô';
        } else if (error.message.includes('Network Error')) {
          errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠';
        }
        Swal.fire({
          title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
          text: errorMessage,
          icon: 'error',
          confirmButtonText: '‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
        });
        return false;
      }
    };

    const success = await attemptLogin();
    setIsLoading(false);
    if (success) {
      console.log('‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } else {
      console.log('‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
    }
  };

  return (
    <>
      <link
        rel="preload"
        href="https://i.postimg.cc/XNgSymzG/IMG-0869.webp"
        as="image"
      />
      <style>
        {`
          .login-background {
            background-image: url('https://i.postimg.cc/XNgSymzG/IMG-0869.webp');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
          }
          .password-container {
            position: relative;
          }
          .password-toggle {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #6B7280;
          }
          .password-toggle:hover {
            color: #4B5563;
          }
        `}
      </style>
      <div className="flex justify-center items-center min-h-screen login-background px-4">
        <div className="w-full max-w-md sm:max-w-sm xs:max-w-xs p-6 sm:p-4 bg-white bg-opacity-90 rounded-lg shadow-lg transition-all duration-300 hover:shadow-xl">
          <div className="flex justify-center mb-4">
            <img
              src="https://i.postimg.cc/sX987Gwd/IMG-0870.webp"
              alt="‡πÇ‡∏•‡πÇ‡∏Å‡πâ"
              loading="lazy"
              className="h-28 sm:h-24 xs:h-18 w-auto object-contain"
            />
          </div>
          <h2 className="text-xl sm:text-lg font-bold text-center mb-4 text-purple-900">
            üîÆLogin‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
          </h2>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label htmlFor="name" className="block mb-1 text-sm font-medium text-gray-700">
                ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:
              </label>
              <input
                type="text"
                id="name"
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
                required
                className="w-full p-2 sm:p-1.5 text-sm border border-[#FFDB6E] rounded-lg focus:ring-2 focus:ring-[#D497FF] focus:border-[#D497FF] transition-colors"
              />
            </div>
            <div>
              <label htmlFor="password" className="block mb-1 text-sm font-medium text-gray-700">
                ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô:
              </label>
              <div className="password-container">
                <input
                  type={showPassword ? 'text' : 'password'}
                  id="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
                  required
                  className="w-full p-2 sm:p-1.5 text-sm border border-[#FFDB6E] rounded-lg focus:ring-2 focus:ring-[#D497FF] focus:border-[#D497FF] transition-colors"
                />
                <svg
                  onClick={() => setShowPassword(!showPassword)}
                  className="password-toggle"
                  width="20"
                  height="20"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  {showPassword ? (
                    <>
                      <path
                        d="M1 12C1 12 5 4 12 4C19 4 23 12 23 12C23 12 19 20 12 20C5 20 1 12 1 12Z"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      />
                      <path
                        d="M12 15C13.6569 15 15 13.6569 15 12C15 10.3431 13.6569 9 12 9C10.3431 9 9 10.3431 9 12C9 13.6569 10.3431 15 12 15Z"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      />
                    </>
                  ) : (
                    <>
                      <path
                        d="M2.99902 3L20.999 21M9.84302 9.913C10.3304 9.39511 10.9926 9.0355 11.7498 8.98734C12.5071 8.93917 13.2475 9.20527 13.8003 9.73883C14.3532 10.2724 14.6814 10.9337 14.7176 11.6397C14.7538 12.3457 14.4957 13.0287 13.999 13.536M9.99902 5C8.75602 5.328 7.67202 6 6.75702 7C4.99602 8.486 3.55702 10.486 2.75202 12C3.55702 13.514 4.99602 15.514 6.75702 17C7.67202 18 8.75602 18.672 9.99902 19M13.999 16.486C15.263 17.172 16.665 18 18.242 19C19.003 18.486 19.669 17.822 20.247 17"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      />
                    </>
                  )}
                </svg>
              </div>
              <p className="mt-1 text-xs text-red-500">
                **‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Login ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡∏π‡∏î‡∏ß‡∏á ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ<br />
                **‡∏´‡∏≤‡∏Å‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ß‡πá‡∏õ‡πÑ‡∏ã‡∏î‡πå‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà IG:
                <a
                  href="https://www.instagram.com/_moodma_?igsh=NGZvZTNmZWJtNjln"
                  target="_blank"
                  rel="noopener noreferrer"
                  className="underline text-blue-600"
                >
                  @_moodma_
                </a>
              </p>
            </div>
            <button
              type="submit"
              disabled={isLoading}
              className={`w-full py-2 sm:py-1.5 px-4 text-sm text-purple-900 bg-[#FFDB6E] rounded-lg hover:bg-[#e6c563] focus:ring-4 focus:ring-[#D497FF] transition-colors duration-200 flex items-center justify-center ${isLoading ? 'opacity-70 cursor-not-allowed' : ''}`}
            >
              {isLoading ? (
                <>
                  <svg
                    className="animate-spin h-4 w-4 sm:h-3 sm:w-3 mr-2 text-purple-900"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <circle
                      className="opacity-25"
                      cx="12"
                      cy="12"
                      r="10"
                      stroke="currentColor"
                      strokeWidth="4"
                    />
                    <path
                      className="opacity-75"
                      fill="currentColor"
                      d="M4 12a8 8 0 018-8v8z"
                    />
                  </svg>
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏à‡∏¥‡∏ï‡∏ô‡∏∞‡∏à‡πä‡∏∞...
                </>
              ) : (
                '‚ú®‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏à‡∏¥‡∏ï‚ú®'
              )}
            </button>
          </form>
        </div>
      </div>
    </>
  );
};

export default Login;
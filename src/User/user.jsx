import React, { useEffect, useState, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import Swal from 'sweetalert2';

const API_BASE_URL = import.meta.env.VITE_API_URL;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ
const parseCardDescription = (description) => {
  const categories = {
    love: '',
    work: '',
    money: '',
    health: '',
    advice: ''
  };

  if (!description) return categories;

  // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  const lines = description.split('\n').filter(line => line.trim());

  let currentCategory = '';

  lines.forEach(line => {
    const trimmedLine = line.trim();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏•‡∏∞ emoji
    if (trimmedLine.includes('üíò ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å') || trimmedLine.includes('‚ù§Ô∏è') || trimmedLine.includes('üíï') ||
      trimmedLine.includes('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå') || trimmedLine.includes('‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å') || trimmedLine.includes('‡∏Ñ‡∏ô‡∏£‡∏±‡∏Å') ||
      trimmedLine.includes('‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏á‡∏á‡∏≤‡∏ô') || trimmedLine.includes('‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏£‡πÅ‡∏°‡∏ô‡∏ï‡∏¥‡∏Å') || trimmedLine.includes('‡πÅ‡∏ü‡∏ô')) {
      currentCategory = 'love';
    } else if (trimmedLine.includes('üíº ‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô') || trimmedLine.includes('‡∏á‡∏≤‡∏ô') || trimmedLine.includes('üè¢') || trimmedLine.includes('üíº') ||
      trimmedLine.includes('‡∏≠‡∏≤‡∏ä‡∏µ‡∏û') || trimmedLine.includes('‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à') || trimmedLine.includes('‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô') ||
      trimmedLine.includes('‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏á‡∏≤‡∏ô') || trimmedLine.includes('‡πÄ‡∏à‡πâ‡∏≤‡∏ô‡∏≤‡∏¢') || trimmedLine.includes('‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó') ||
      trimmedLine.includes('‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£') || trimmedLine.includes('‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á')) {
      currentCategory = 'work';
    } else if (trimmedLine.includes('üí∏ ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô') || trimmedLine.includes('‡πÄ‡∏á‡∏¥‡∏ô') || trimmedLine.includes('üí∞') || trimmedLine.includes('üíµ') ||
      trimmedLine.includes('‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô') || trimmedLine.includes('‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à') || trimmedLine.includes('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏á‡∏Ñ‡∏±‡πà‡∏á') ||
      trimmedLine.includes('‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏°') || trimmedLine.includes('‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ') || trimmedLine.includes('‡∏Å‡∏≥‡πÑ‡∏£') ||
      trimmedLine.includes('‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô') || trimmedLine.includes('‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì')) {
      currentCategory = 'money';
    } else if (trimmedLine.includes('ü©∫ ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û') || trimmedLine.includes('‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢') || trimmedLine.includes('üè•') || trimmedLine.includes('ü©∫') ||
      trimmedLine.includes('‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤') || trimmedLine.includes('‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏à‡πá‡∏ö‡∏õ‡πà‡∏ß‡∏¢') || trimmedLine.includes('‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢') ||
      trimmedLine.includes('‡∏à‡∏¥‡∏ï‡πÉ‡∏à') || trimmedLine.includes('‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î') || trimmedLine.includes('‡πÇ‡∏£‡∏Ñ') ||
      trimmedLine.includes('‡∏≠‡∏≤‡∏Å‡∏≤‡∏£') || trimmedLine.includes('‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô')) {
      currentCategory = 'health';
    } else if (trimmedLine.includes('üß≠ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥') || trimmedLine.includes('‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥') || trimmedLine.includes('üí°') || trimmedLine.includes('üß≠') ||
      trimmedLine.includes('‡∏Ñ‡∏ß‡∏£') || trimmedLine.includes('‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£') || trimmedLine.includes('‡∏ß‡∏¥‡∏ò‡∏µ') ||
      trimmedLine.includes('‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö') || trimmedLine.includes('‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á') || trimmedLine.includes('#') ||
      trimmedLine.includes('‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏¥‡∏î') || trimmedLine.includes('‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á')) {
      currentCategory = 'advice';
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    if (currentCategory && trimmedLine) {
      if (categories[currentCategory]) {
        categories[currentCategory] += '\n' + trimmedLine;
      } else {
        categories[currentCategory] = trimmedLine;
      }
    }
  });

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
  if (!Object.values(categories).some(cat => cat)) {
    const words = description.split(' ');
    const chunkSize = Math.ceil(words.length / 5);

    for (let i = 0; i < 5; i++) {
      const start = i * chunkSize;
      const end = start + chunkSize;
      const chunk = words.slice(start, end).join(' ');

      if (chunk.trim()) {
        const categoryKeys = Object.keys(categories);
        categories[categoryKeys[i]] = chunk.trim();
      }
    }
  }

  return categories;
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
const showCardDescriptionByCategory = (description, cardName) => {
  const categories = parseCardDescription(description);

  const categoryLabels = {
    love: 'üíï ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å',
    work: 'üíº ‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô',
    money: 'üí∞ ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô',
    health: 'üè• ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
    advice: 'üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥'
  };

  const categoryColors = {
    love: 'category-love',
    work: 'category-work',
    money: 'category-money',
    health: 'category-health',
    advice: 'category-advice'
  };

  // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏û‡πà (‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢)
  const firstLine = description.split('\n')[0]?.trim() || '';
  const cardSubtitle = firstLine && firstLine !== cardName ? firstLine : '';

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î
  const buttonsHTML = Object.entries(categories)
    .filter(([key, value]) => value.trim())
    .map(([key, value]) => {
      // ‡πÉ‡∏ä‡πâ base64 encoding ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ escape characters
      const encodedValue = btoa(unescape(encodeURIComponent(value)));
      const encodedCardName = btoa(unescape(encodeURIComponent(cardName)));

      return `
                <button 
                    onclick="window.showCategoryDescription('${key}', '${encodedValue}', '${encodedCardName}')"
                    class="w-full mb-3 px-4 py-3 text-white rounded-lg text-mobile-base font-medium category-button ${categoryColors[key]} transition-all duration-200"
                >
                    ${categoryLabels[key]}
                </button>
            `;
    }).join('');

  Swal.fire({
    title: `üîÆ ${cardName}`,
    html: `
            <div class="text-center">
                ${cardSubtitle ? `<p class="card-subtitle mystic-gold-shadow text-mobile-sm">${cardSubtitle}</p>` : ''}
                <div class="space-y-2">
                    ${buttonsHTML}
                </div>
            </div>
        `,
    showConfirmButton: false,
    showCloseButton: true,
    customClass: {
      popup: 'mystic-modal w-[95vw] max-w-md rounded-xl mx-2',
      title: 'mystic-heading text-[clamp(1rem,4vw,1.25rem)] font-bold text-purple-800 mb-3',
      closeButton: 'text-gray-500 hover:text-gray-700',
      content: 'mystic-gold-shadow',
    }
  });

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô global ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  window.showCategoryDescription = (category, encodedContent, encodedCardName) => {
    const categoryLabels = {
      love: 'üîÆ',
      work: 'üîÆ',
      money: 'üîÆ',
      health: 'üîÆ',
      advice: 'üîÆ'
    };

    const categoryColors = {
      love: 'category-love',
      work: 'category-work',
      money: 'category-money',
      health: 'category-health',
      advice: 'category-advice'
    };

    // Decode ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å base64
    const content = decodeURIComponent(escape(atob(encodedContent)));
    const cardName = decodeURIComponent(escape(atob(encodedCardName)));

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö (‡πÅ‡∏õ‡∏•‡∏á \n ‡πÄ‡∏õ‡πá‡∏ô <br>)
    const formattedContent = content.replace(/\n/g, '<br>');

    Swal.fire({
      title: `${categoryLabels[category]} - ${cardName}`,
      html: `<div class="category-content mystic-gold-shadow text-[clamp(0.875rem,3.5vw,1rem)]">${formattedContent}</div>`,
      showConfirmButton: false,
      showCancelButton: true,
      cancelButtonText: '‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö',
      customClass: {
        popup: 'mystic-modal w-[95vw] max-w-md rounded-xl mx-2',
        title: 'mystic-heading text-[clamp(1rem,4vw,1.25rem)] font-bold text-blue-800 mb-3',
        content: 'mystic-gold-text max-h-[60vh] overflow-y-auto px-2',
        cancelButton: `${categoryColors[category]} px-6 py-3 text-white rounded-lg text-[clamp(0.875rem,3.5vw,1rem)] font-medium mystic-btn`
      }
    }).then((result) => {
      if (result.dismiss === Swal.DismissReason.cancel) {
        // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        showCardDescriptionByCategory(description, cardName);
      }
    });
  };
};

const User = () => {
  const navigate = useNavigate();
  const [cards, setCards] = useState([]);
  const [username, setUsername] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [visibleCards, setVisibleCards] = useState(10);

  const loadMore = () => setVisibleCards((prev) => prev + 10);

  const showPrediction = (cardName, description, imageUrl) => {
    showCardDescriptionByCategory(description, cardName);
  };

  const BringUserCard = async () => {
    setIsLoading(true);
    try {
      const user = localStorage.getItem('user');
      if (!user) {
        Swal.fire({
          title: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
          text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
          icon: 'warning',
          confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á',
          customClass: {
            popup: 'mystic-modal bg-white shadow-lg rounded-lg max-w-[90vw]',
            title: 'mystic-heading text-xl font-bold',
            confirmButton: 'mystic-btn bg-blue-500 text-white hover:bg-blue-600 px-4 py-2'
          }
        }).then(() => {
          navigate('/login');
        });
        return;
      }

      const userData = JSON.parse(user);
      console.log('User data from localStorage:', userData); // Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      if (!userData?.user?.user_id) {
        localStorage.removeItem('user');
        Swal.fire({
          title: '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
          text: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà',
          icon: 'error',
          confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á',
          customClass: {
            popup: 'mystic-modal bg-white shadow-lg rounded-lg max-w-[90vw]',
            title: 'mystic-heading text-xl font-bold',
            confirmButton: 'mystic-btn bg-blue-500 text-white hover:bg-blue-600 px-4 py-2'
          }
        }).then(() => {
          navigate('/login');
        });
        return;
      }

      // Set username from userData, try 'username' or 'name' as fallback
      setUsername(userData.user.username || userData.user.name || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠');

      const res = await axios.post(`${API_BASE_URL}user-card`, { user_id: userData.user.user_id }, { timeout: 10000 });
      if (res.data?.data && Array.isArray(res.data.data)) {
        setCards(res.data.data);
      } else {
        setCards([]);
        Swal.fire({
          title: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
          text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
          icon: 'info',
          confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á',
          customClass: {
            popup: 'mystic-modal bg-white shadow-lg rounded-lg max-w-[90vw]',
            title: 'mystic-heading text-xl font-bold',
            confirmButton: 'mystic-btn bg-blue-500 text-white hover:bg-blue-600 px-4 py-2'
          }
        });
      }
    } catch (error) {
      Swal.fire({
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        text: error.response?.data?.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ',
        icon: 'error',
        confirmButtonText: '‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
        customClass: {
          popup: 'mystic-modal bg-white shadow-lg rounded-lg max-w-[90vw]',
          title: 'mystic-heading text-xl font-bold',
          confirmButton: 'mystic-btn bg-blue-500 text-white hover:bg-blue-600 px-4 py-2'
        }
      });
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    BringUserCard();
  }, []);

  const groupedCards = useMemo(() => {
    return cards.reduce((acc, card) => {
      const cardInfo = card.cards || card;
      const key = cardInfo.id || cardInfo.name;
      if (!key) return acc;
      if (!acc[key]) acc[key] = { ...cardInfo, count: 0 };
      acc[key].count += 1;
      return acc;
    }, {});
  }, [cards]);

  const uniqueCards = Object.values(groupedCards).sort((a, b) => a.card_id - b.card_id);

  if (isLoading) {
    return (
      <div className="mx-4 sm:mx-6 md:mx-8 lg:mx-12 py-6">
        <div className="mb-6">
          <div className="mystic-card glassmorphism border-2 border-yellow-300 rounded-xl shadow-xl p-4">
            <div className="flex flex-col items-center py-4 animate-pulse">
              <div className="w-20 h-20 mb-3 rounded-full bg-yellow-300"></div>
              <div className="h-5 w-32 bg-yellow-300 rounded mb-1"></div>
              <div className="h-4 w-48 bg-yellow-300 rounded"></div>
            </div>
          </div>
        </div>
        <div>
          <h2 className="mystic-heading text-lg font-semibold mb-2 text-center">‡πÑ‡∏û‡πà‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</h2>
          <div className="grid grid-cols-2 sm:grid-cols-3 gap-4 border-2 border-yellow-300 rounded-xl p-4 glassmorphism justify-items-center">
            {[...Array(6)].map((_, index) => (
              <div key={index} className="mystic-card glassmorphism rounded-xl shadow-lg animate-pulse">
                <div className="relative w-full" style={{ paddingTop: '150%' }}>
                  <div className="absolute top-0 left-0 w-full h-full bg-gray-300 rounded-t-lg"></div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="mx-4 sm:mx-6 md:mx-8 lg:mx-12 py-6">
      <div className="mb-6">
        <div className="mystic-card glassmorphism border-2 border-yellow-300 rounded-xl shadow-xl p-4">
          <div className="flex flex-col items-center py-4">
            <img
              className="w-20 h-20 mb-3 rounded-full shadow-lg border-2 border-yellow-300 bg-white/60"
              src="https://i.postimg.cc/3N5vPMDq/moodcura.webp"
              alt="User Avatar"
              loading="eager"
            />
            <h5 className="mb-1 text-lg font-bold mystic-gold-text font-serif">{username}</h5>
            <span className="text-xs text-center mystic-gold-text font-serif">‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ú‡∏°‡∏°‡∏π‡∏î‡πÜ‡πÄ‡∏≠‡∏á ‡∏™‡∏∞‡∏™‡∏°‡πÑ‡∏û‡πà‡πÄ‡∏¢‡∏≠‡∏∞‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö‡πÄ‡∏î‡πà‡∏ß‡∏ú‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏´‡πâmoooo</span>
          </div>
        </div>
      </div>

      <div>
        <h2 className="mystic-heading text-lg font-semibold mb-2 text-center">‡πÑ‡∏û‡πà‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</h2>
        <p className="text-sm text-center mb-4 mystic-gold-text font-serif">
          {uniqueCards.length > 0 ? `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏≠‡∏á ${uniqueCards.length} ‡πÑ‡∏û‡πà` : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏≠‡∏á..‡πÄ‡∏•‡∏¢‡∏´‡∏£‡∏≠???'}
        </p>
        <div className="grid grid-cols-2 sm:grid-cols-3 gap-4 border-2 border-yellow-300 rounded-xl p-4 glassmorphism">
          {uniqueCards.length > 0 ? (
            <>
              {uniqueCards.slice(0, visibleCards).map((cardInfo) => (
                <div
                  key={cardInfo.id || cardInfo.name}
                  className="mystic-card glassmorphism rounded-xl shadow-lg p-4 flex flex-col items-center transition-transform duration-300 hover:scale-105 cursor-pointer border-2 border-yellow-300"
                >
                  <div className="relative w-full" style={{ paddingTop: '150%' }}>
                    <img
                      src={cardInfo.image_url || 'https://via.placeholder.com/300x450?text=Image+Not+Found'}
                      alt={cardInfo.name}
                      width="200"
                      height="300"
                      className="absolute top-0 left-0 h-full w-auto mx-auto object-contain rounded-t-lg border-2 border-yellow-300 shadow-lg bg-white/60 bg-gray-100"
                      loading="lazy"
                      onError={(e) => (e.target.src = 'https://via.placeholder.com/300x450?text=Image+Not+Found')}
                    />
                  </div>
                  <p className="mystic-gold-text text-xs font-medium mt-2 font-serif line-clamp-2 text-center">{cardInfo.name}</p>
                  <button
                    className="user-card-btn mystic-btn bg-gradient-to-r from-purple-600 via-purple-500 to-yellow-400 hover:from-yellow-400 hover:to-purple-600 text-white text-[0.75rem] px-2 py-1 rounded-md font-medium mt-1 shadow-lg border-2 border-yellow-300 sm:text-sm sm:px-3 sm:py-1.5"
                    onClick={() => showPrediction(cardInfo.name, cardInfo.description, cardInfo.image_url)}
                  >
                    ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏û‡πà
                  </button>
                </div>
              ))}
              {visibleCards < uniqueCards.length && (
                <button
                  onClick={loadMore}
                  className="mt-4 px-6 py-3 mystic-btn bg-gradient-to-r from-purple-600 via-purple-500 to-yellow-400 hover:from-yellow-400 hover:to-purple-600 text-white rounded-lg mx-auto block col-span-full text-mobile-base font-medium touch-button shadow-lg border-2 border-yellow-300"
                >
                  ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏û‡πà‡∏ï‡πà‡∏≠‡πÄ‡∏•‡∏¢ü´µ
                </button>
              )}
            </>
          ) : (
            <p className="mystic-gold-text col-span-full text-center text-sm">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏≠‡∏á..‡πÄ‡∏•‡∏¢‡∏´‡∏£‡∏≠???</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default User;      